import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { useDispatch, useSelector } from "react-redux";
import Head from "next/head";
import classNames from "classnames";
import styles from "./billing.module.scss";
import Appbar from "../components/Appbar/Appbar";
import Stepper from "../components/Stepper/Stepper";
import FormField from "../components/FormField/FormField";
import Button from "../components/Button/Button";
import Footer from "../components/Footer/Footer";

import { addBilling } from "../state/features/order/orderSlice";

import {
  isValidFullName,
  isValidAddress,
  isValidCity,
  isValidPostalCode,
  isValidCountry,
} from "../utils/form";

export default function Billing() {
  const billingInfo = useSelector((state) => state.order.billing);
  const dispatch = useDispatch();

  const [fullName, setFullName] = useState(billingInfo.fullName);
  const [address, setAddress] = useState(billingInfo.address);
  const [city, setCity] = useState(billingInfo.city);
  const [postalCode, setPostalCode] = useState(billingInfo.postalCode);
  const [country, setCountry] = useState(billingInfo.country);

  const [fullNameError, setFullNameError] = useState("");
  const [addressError, setAddressError] = useState("");
  const [cityError, setCityError] = useState("");
  const [postalCodeError, setPostalCodeError] = useState("");
  const [countryError, setCountryError] = useState("");

  const router = useRouter();

  // TODO: use router effect to check shipping info

  const handleSubmit = async (evt) => {
    evt.preventDefault();

    handleErrorMessages("", "", "", "", "");

    const checkFullName = isValidFullName(fullName);
    const checkAddress = isValidAddress(address);
    const checkCity = isValidCity(city);
    const checkPostalCode = isValidPostalCode(postalCode);
    const checkCountry = isValidCountry(country);

    handleErrorMessages(
      checkFullName.errorMessage,
      checkAddress.errorMessage,
      checkCity.errorMessage,
      checkPostalCode.errorMessage,
      checkCountry.errorMessage
    );

    const validFields =
      checkFullName.answer &&
      checkAddress.answer &&
      checkCity.answer &&
      checkPostalCode.answer &&
      checkCountry.answer;

    console.log(validFields);

    if (validFields) {
      dispatch(
        addBilling({
          fullName,
          address,
          city,
          postalCode,
          country,
        })
      );
      router.push("/payment");
    }
  };

  /**
   * Handle error messages
   * @param {string} fullNameMsg
   * @param {string} addressMsg
   * @param {string} cityMsg
   * @param {string} postalCodeMsg
   * @param {string} countryMsg
   */
  const handleErrorMessages = (
    fullNameMsg,
    addressMsg,
    cityMsg,
    postalCodeMsg,
    countryMsg
  ) => {
    setFullNameError(fullNameMsg);
    setAddressError(addressMsg);
    setCityError(cityMsg);
    setPostalCodeError(postalCodeMsg);
    setCountryError(countryMsg);
  };

  return (
    <div className={classNames(styles.billing)}>
      <Head>
        <title>FruigeBag, buy fresh fruits and vegetables</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        {/* Appbar */}
        <Appbar customClasses={classNames(styles.billing__header)} logo />
        {/* Stepper */}
        <Stepper
          step1
          step2
          step3
          customClasses={classNames(styles.billing__stepper)}
        />
        <main className="billing__main">
          <form
            className={classNames(styles.billing__form, "form")}
            onSubmit={handleSubmit}
          >
            <div className="form__section">
              <h1 className="form__title">Billing Address</h1>
            </div>
            <div className="form__section">
              {/* Full Name */}
              <FormField
                type="text"
                id="full_name"
                name="full_name"
                label="Full Name"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                errorMessage={fullNameError}
              />
            </div>
            <div className="form__section">
              {/* Address */}
              <FormField
                type="text"
                id="address"
                name="address"
                label="Address"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                errorMessage={addressError}
              />
            </div>
            <div className="form__section">
              {/* City */}
              <FormField
                type="text"
                id="city"
                name="city"
                label="City"
                value={city}
                onChange={(e) => setCity(e.target.value)}
                errorMessage={cityError}
              />
            </div>
            <div className="form__section">
              {/* Postal Code */}
              <FormField
                type="text"
                id="postal_code"
                name="postal_code"
                label="Postal Code"
                value={postalCode}
                onChange={(e) => setPostalCode(e.target.value)}
                errorMessage={postalCodeError}
              />
            </div>
            <div className="form__section">
              {/* Country */}
              <FormField
                type="text"
                id="country"
                name="country"
                label="Country"
                value={country}
                onChange={(e) => setCountry(e.target.value)}
                errorMessage={countryError}
              />
            </div>
            <div className="form__section">
              <Button primary customClasses="form__btn">
                Continue
              </Button>
            </div>
          </form>
        </main>
      </div>
      {/* Footer */}
      <Footer mini customClasses={styles.billing__footer} />
    </div>
  );
}
